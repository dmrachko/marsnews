/**
 ********************************************************************************
 *** RankedCountriesServiceImpl.java                                          ***
 *** The implementation of the IRankedCountriesService.                       ***
 *** generated by AnoSiteGenerator (ASG), Version: 1.3.3                      ***
 *** Copyright (C) 2005 - 2010 Anotheria.net, www.anotheria.net               ***
 *** All Rights Reserved.                                                     ***
 ********************************************************************************
 *** Don't edit this code, if you aren't sure                                 ***
 *** that you do exactly know what you are doing!                             ***
 *** It's better to invest time in the generator, as into the generated code. ***
 ********************************************************************************
 */

package net.anotheria.marsnews.gen.rankedcountries.service;

import java.util.List;
import net.anotheria.util.sorter.SortType;
import net.anotheria.util.sorter.StaticQuickSorter;
import net.anotheria.marsnews.gen.shared.service.BasicService;
import net.anotheria.marsnews.gen.rankedcountries.service.persistence.IRankedCountriesPersistenceService;
import net.anotheria.marsnews.gen.rankedcountries.service.persistence.RankedCountriesPersistenceServiceFactory;
import net.anotheria.marsnews.gen.rankedcountries.service.persistence.RankedCountriesPersistenceServiceException;
import net.anotheria.anodoc.query2.DocumentQuery;
import net.anotheria.anodoc.query2.QueryResult;
import net.anotheria.anodoc.query2.QueryResultEntry;
import net.anotheria.anodoc.query2.QueryProperty;
import net.anotheria.util.xml.XMLNode;
import net.anotheria.util.xml.XMLAttribute;
import net.anotheria.util.slicer.Segment;
import net.anotheria.marsnews.gen.rankedcountries.data.RankedCountry;
import net.anotheria.marsnews.gen.rankedcountries.data.RankedCountryXMLHelper;
import net.anotheria.marsnews.gen.rankedcountries.service.persistence.RankedCountryNotFoundInRankedCountriesPersistenceServiceException;

public class RankedCountriesServiceImpl extends BasicService implements IRankedCountriesService{

	// Generated by: class net.anotheria.asg.generator.model.db.JDBCBasedServiceGenerator.generateImplementation

	private static RankedCountriesServiceImpl instance;

	private IRankedCountriesPersistenceService pService;
	private RankedCountriesServiceImpl(){
		pService = RankedCountriesPersistenceServiceFactory.createRankedCountriesPersistenceService();
	}

	static final RankedCountriesServiceImpl getInstance(){
		if (instance==null){
			instance = new RankedCountriesServiceImpl();
		}
		return instance;
	}

	public List<RankedCountry> getRankedCountrys() throws RankedCountriesServiceException {
		try {
			return pService.getRankedCountrys();
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	public List<RankedCountry> getRankedCountrys(SortType sortType) throws RankedCountriesServiceException {
		return StaticQuickSorter.sort(getRankedCountrys(), sortType);
	}

	public void deleteRankedCountry(RankedCountry rankedcountry) throws RankedCountriesServiceException {
		deleteRankedCountry(rankedcountry.getId());
		if(hasServiceListeners()){
			fireObjectDeletedEvent(rankedcountry);
		}
	}

	public void deleteRankedCountry(String id) throws RankedCountriesServiceException {
		try {
			RankedCountry varValue = hasServiceListeners()?pService.getRankedCountry(id):null;
			pService.deleteRankedCountry(id);
			if(varValue!=null){
				fireObjectDeletedEvent(varValue);
			}
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	/**
	 * Deletes multiple RankedCountry objects.
	 */
	public void deleteRankedCountrys(List<RankedCountry> list) throws RankedCountriesServiceException {
		try {
			pService.deleteRankedCountrys(list);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		if (hasServiceListeners()){
			for (int t = 0; t<list.size(); t++)
				fireObjectDeletedEvent(list.get(t));
		}
	}

	public RankedCountry getRankedCountry(String id) throws RankedCountriesServiceException {
		try {
			return pService.getRankedCountry(id);
		}catch(RankedCountryNotFoundInRankedCountriesPersistenceServiceException e){
			throw new RankedCountryNotFoundInRankedCountriesServiceException(id);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	public RankedCountry importRankedCountry(RankedCountry rankedcountry) throws RankedCountriesServiceException {
		try {
			rankedcountry = pService.importRankedCountry(rankedcountry);
			if(hasServiceListeners()){
				fireObjectImportedEvent(rankedcountry);
			}
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		return rankedcountry;
	}

	public List<RankedCountry> importRankedCountrys(List<RankedCountry> list) throws RankedCountriesServiceException {
		List<RankedCountry> ret = null;
		try {
			ret = pService.importRankedCountrys(list);
			if(hasServiceListeners()){
				for (RankedCountry rankedcountry : ret)
					fireObjectImportedEvent(rankedcountry);
			}
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		return ret;
	}

	public RankedCountry createRankedCountry(RankedCountry rankedcountry) throws RankedCountriesServiceException {
		try {
			rankedcountry = pService.createRankedCountry(rankedcountry);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		fireObjectCreatedEvent(rankedcountry);
		return rankedcountry;
	}

	/**
	 * Creates multiple new RankedCountry objects.
	 * Returns the created versions.
	 */
	public List<RankedCountry> createRankedCountrys(List<RankedCountry> list) throws RankedCountriesServiceException {
		List<RankedCountry> ret = null;
		try {
			ret = pService.createRankedCountrys(list);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		if (hasServiceListeners()){
			for (RankedCountry rankedcountry : ret)
				fireObjectCreatedEvent(rankedcountry);
		}
		return ret;
	}

	/**
	 * Updates multiple RankedCountry objects.
	 * Returns the updated versions.
	 */
	public List<RankedCountry> updateRankedCountrys(List<RankedCountry> list) throws RankedCountriesServiceException {
		List<RankedCountry> ret = null;
		try {
			ret = pService.updateRankedCountrys(list);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		if (hasServiceListeners()){
			for (int t = 0; t<ret.size(); t++)
				fireObjectUpdatedEvent(list.get(t), ret.get(t));
		}
		return ret;
	}

	public RankedCountry updateRankedCountry(RankedCountry rankedcountry) throws RankedCountriesServiceException {
		RankedCountry oldVersion = null;
		try {
			if (hasServiceListeners())
				oldVersion = pService.getRankedCountry(rankedcountry.getId());
			rankedcountry = pService.updateRankedCountry(rankedcountry);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
		if (oldVersion!=null)
			fireObjectUpdatedEvent(oldVersion, rankedcountry);
		return rankedcountry;
	}

	public List<RankedCountry> getRankedCountrysByProperty(String propertyName, Object value) throws RankedCountriesServiceException {
		QueryProperty p = new QueryProperty(propertyName, value);
		try{
			return pService.getRankedCountrysByProperty(p);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	public List<RankedCountry> getRankedCountrysByProperty(String propertyName, Object value, SortType sortType) throws RankedCountriesServiceException {
		return StaticQuickSorter.sort(getRankedCountrysByProperty(propertyName, value), sortType);
	}
	/**
	 * Executes a query on RankedCountrys
	 */
	public QueryResult executeQueryOnRankedCountrys(DocumentQuery query) throws RankedCountriesServiceException {
		List<RankedCountry> allRankedCountrys = getRankedCountrys();
		QueryResult result = new QueryResult();
		for (int i=0; i<allRankedCountrys.size(); i++){
			List<QueryResultEntry> partialResult = query.match(allRankedCountrys.get(i));
			result.add(partialResult);
		}
		return result;
	}

	/**
	 * Returns all RankedCountry objects, where property matches.
	 */
	public List<RankedCountry> getRankedCountrysByProperty(QueryProperty... property) throws RankedCountriesServiceException {;
		try{
			return pService.getRankedCountrysByProperty(property);
		}catch(RankedCountriesPersistenceServiceException e){
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	/**
	 * Returns all RankedCountry objects, where property matches, sorted
	 */
	public List<RankedCountry> getRankedCountrysByProperty(SortType sortType, QueryProperty... property) throws RankedCountriesServiceException {;
		return StaticQuickSorter.sort(getRankedCountrysByProperty(property), sortType);
	}

	/**
	 * Returns RankedCountry objects count.
	 */
	public int getRankedCountrysCount() throws RankedCountriesServiceException {
		try {
			return pService.getRankedCountrysCount();
		} catch (RankedCountriesPersistenceServiceException e) {
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	/**
	 * Returns RankedCountry objects segment.
	 */
	public List<RankedCountry> getRankedCountrys(Segment aSegment) throws RankedCountriesServiceException {
		try {
			return pService.getRankedCountrys(aSegment);
		} catch (RankedCountriesPersistenceServiceException e) {
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	/**
	 * Returns RankedCountry objects segment, where property matches.
	 */
	public List<RankedCountry> getRankedCountrysByProperty(Segment aSegment, QueryProperty... aProperty) throws RankedCountriesServiceException {;
		try {
			return pService.getRankedCountrysByProperty(aSegment, aProperty);
		} catch (RankedCountriesPersistenceServiceException e) {
			throw new RankedCountriesServiceException("Persistence failed: "+e.getMessage());
		}
	}

	/**
	 * Returns RankedCountry objects segment, where property matches, sorted
	 */
	public List<RankedCountry> getRankedCountrysByProperty(Segment aSegment, SortType aSortType, QueryProperty... aProperty) throws RankedCountriesServiceException {;
		return StaticQuickSorter.sort(getRankedCountrysByProperty(aSegment, aProperty), aSortType);
	}


	public XMLNode exportRankedCountrysToXML(){
		XMLNode ret = new XMLNode("RankedCountrys");
		try{
			List<RankedCountry> list = getRankedCountrys();
			ret.addAttribute(new XMLAttribute("count", list.size()));
			for (RankedCountry object : list)
				ret.addChildNode(RankedCountryXMLHelper.toXML(object));
			return ret;
		}
		catch(RankedCountriesServiceException e){;
			throw new RuntimeException("exportRankedCountrysToXML() failure: " + e.getStackTrace());
		}
	}

	public XMLNode exportRankedCountrysToXML(List<RankedCountry> list){
		XMLNode ret = new XMLNode("RankedCountrys");
		ret.addAttribute(new XMLAttribute("count", list.size()));
		for (RankedCountry object : list)
			ret.addChildNode(RankedCountryXMLHelper.toXML(object));
		return ret;
	}

	public XMLNode exportRankedCountrysToXML(String languages[]){
		XMLNode ret = new XMLNode("RankedCountrys");
		try{
			List<RankedCountry> list = getRankedCountrys();
			ret.addAttribute(new XMLAttribute("count", list.size()));
			for (RankedCountry object : list)
				ret.addChildNode(RankedCountryXMLHelper.toXML(object, languages));
			return ret;
		}
		catch(RankedCountriesServiceException e){;
			throw new RuntimeException("exportRankedCountrysToXML() failure: " + e.getStackTrace());
		}
	}

	public XMLNode exportRankedCountrysToXML(String languages[], List<RankedCountry> list){
		XMLNode ret = new XMLNode("RankedCountrys");
		ret.addAttribute(new XMLAttribute("count", list.size()));
		for (RankedCountry object : list)
			ret.addChildNode(RankedCountryXMLHelper.toXML(object, languages));
		return ret;
	}

	/**
	 * Executes a query on all data objects (documents, vo) which are part of this module and managed by this service
	 */
	public QueryResult executeQueryOnAllObjects(DocumentQuery query) throws RankedCountriesServiceException {
		QueryResult ret = new QueryResult();
		ret.add(executeQueryOnRankedCountrys(query).getEntries());
		return ret;
	} //executeQueryOnAllObjects

	public XMLNode exportToXML(){
		XMLNode ret = new XMLNode("RankedCountries");

		ret.addChildNode(exportRankedCountrysToXML());

		return ret;
	}

	public XMLNode exportToXML(String[] languages){
		XMLNode ret = new XMLNode("RankedCountries");

		ret.addChildNode(exportRankedCountrysToXML(languages));

		return ret;
	}
}
